# Use Node.js Alpine as base image for smaller size
FROM node:20-alpine AS builder

# Create non-root user for security (required for rootless mode)
# This is mandatory as per subject requirements for security
RUN addgroup -S appgroup && adduser -S appuser -G appgroup

# Configure npm to work with non-root user
# This ensures npm can install packages without root privileges
ENV NPM_CONFIG_PREFIX=/home/appuser/.npm-global
ENV PATH="/home/appuser/.npm-global/bin:${PATH}"

# Switch to non-root user for security
# All subsequent commands will run as non-root
USER appuser
WORKDIR /home/appuser/app

# Create required directories
# src/styles: for Tailwind CSS
# dist: for compiled output
RUN mkdir -p src/styles dist && \
    mkdir -p /home/appuser/.npm-global

# Copy configuration files with proper ownership
# Using --chown ensures files are owned by non-root user
# These files are copied first for better layer caching
COPY --chown=appuser:appgroup package.json .
COPY --chown=appuser:appgroup tailwind.config.js .
COPY --chown=appuser:appgroup tsconfig.json .

# Install dependencies including TypeScript types
# @types/node is required for TypeScript Node.js definitions
RUN npm install && \
    npm install --save-dev @types/node

# Create initial files with proper configuration
# input.css: Required for Tailwind CSS
# index.html: Single page application entry point
RUN printf "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n" > src/styles/input.css && \
    printf '<!DOCTYPE html>\n\
<html lang="en">\n\
<head>\n\
    <meta charset="UTF-8">\n\
    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n\
    <title>42 Transcendence</title>\n\
    <link href="styles.css" rel="stylesheet">\n\
</head>\n\
<body class="bg-gradient-to-r from-blue-500 to-purple-600 min-h-screen">\n\
    <div class="container mx-auto px-4 py-8">\n\
        <div class="bg-white rounded-lg shadow-xl p-8 max-w-2xl mx-auto mt-10">\n\
            <h1 class="text-4xl font-bold text-center mb-6 text-gray-800">42 Transcendence</h1>\n\
            <p class="text-lg text-gray-600 text-center mb-4">Welcome to the game</p>\n\
            <div class="flex justify-center space-x-4">\n\
                <button class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded transition duration-200">\n\
                    Play Game\n\
                </button>\n\
                <button class="bg-purple-500 hover:bg-purple-600 text-white font-bold py-2 px-4 rounded transition duration-200">\n\
                    Profile\n\
                </button>\n\
            </div>\n\
        </div>\n\
    </div>\n\
</body>\n\
</html>' > src/index.html

# Create TypeScript server file
# This implements a basic HTTP server that:
# - Serves static files from dist directory
# - Handles SPA routing
# - Provides proper content types
# - Implements error handling
RUN printf 'import { createServer, IncomingMessage, ServerResponse } from "http";\n\
import { readFile } from "fs";\n\
import { extname, join } from "path";\n\
\n\
const DIST_DIR = "./dist";\n\
\n\
const server = createServer((req: IncomingMessage, res: ServerResponse) => {\n\
    // Get the URL path or default to index.html\n\
    const urlPath = req.url === "/" ? "/index.html" : req.url;\n\
\n\
    // Ensure urlPath is defined\n\
    if (!urlPath) {\n\
        res.writeHead(404);\n\
        res.end("404 Not Found");\n\
        return;\n\
    }\n\
\n\
    // Create the full file path\n\
    const filePath = join(DIST_DIR, urlPath);\n\
    const ext = extname(filePath);\n\
\n\
    // Set content type based on file extension\n\
    let contentType = "text/html";\n\
    switch (ext) {\n\
        case ".css": contentType = "text/css"; break;\n\
        case ".js": contentType = "text/javascript"; break;\n\
        case ".json": contentType = "application/json"; break;\n\
        case ".png": contentType = "image/png"; break;\n\
        case ".jpg": contentType = "image/jpg"; break;\n\
        case ".svg": contentType = "image/svg+xml"; break;\n\
    }\n\
\n\
    // Read and serve the file\n\
    readFile(filePath, (error: NodeJS.ErrnoException | null, content: Buffer) => {\n\
        if (error) {\n\
            if(error.code === "ENOENT") {\n\
                console.error(`File not found: ${filePath}`);\n\
                res.writeHead(404);\n\
                res.end(`404 Not Found: ${urlPath}`);\n\
            } else {\n\
                console.error(`Server error: ${error.code}`);\n\
                res.writeHead(500);\n\
                res.end(`500 Internal Server Error: ${error.message}`);\n\
            }\n\
        } else {\n\
            res.writeHead(200, { "Content-Type": contentType });\n\
            res.end(content, "utf-8");\n\
            console.log(`Served: ${filePath} (${contentType}`);\n\
        }\n\
    });\n\
});\n\
\n\
const PORT = 3000;\n\
server.listen(PORT,"0.0.0.0", () => {\n\
    console.log(`Server running at http://0.0.0.0:${PORT}`);\n\
    console.log(`Serving files from: ${DIST_DIR}`);\n\
});\n' > src/server.ts

# Build the application for production
RUN npm run build

# Start fresh for production image
FROM node:20-alpine

# Set up non-root user in production
RUN addgroup -S appgroup && adduser -S appuser -G appgroup
USER appuser
WORKDIR /home/appuser/app

# Copy only necessary files from builder
# This reduces final image size
COPY --from=builder /home/appuser/app/dist ./dist
COPY --from=builder /home/appuser/app/package.json .

# Install only production dependencies
RUN npm install --production

# Expose port for access
EXPOSE 3000

# Start production server
CMD ["npm", "start"]
