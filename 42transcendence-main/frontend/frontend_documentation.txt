# Frontend Implementation Documentation for 42 Transcendence
# =====================================================

Table of Contents:
1. Frontend Architecture Overview
2. Core Components Explanation
3. Page Components Implementation
4. Game Engine Integration
5. Key Features and Benefits
6. State Management
7. Testing and Maintenance

# 1. Frontend Architecture Overview

## Core Technologies
1. TypeScript
   - Strongly typed JavaScript superset
   - Enhanced IDE support and error detection
   - Better code organization and maintainability

2. Tailwind CSS
   - Utility-first CSS framework
   - Rapid UI development
   - Responsive design system

3. Babylon.js
   - 3D game engine for web browsers
   - WebGL-based rendering
   - Physics engine integration

## Directory Structure (Frontend)
```
frontend/
├── src/
│   ├── pages/          # Main page components
│   │   ├── SettingsPage.ts
│   │   ├── AboutPage.ts
│   │   ├── GamePage.ts
│   │   └── HomePage.ts
│   ├── components/     # Reusable UI components
│   │   ├── Navigation.ts
│   │   └── Forms/
│   ├── game/          # Game engine related code
│   │   ├── Scene.ts
│   │   ├── Physics.ts
│   │   └── Controls.ts
│   ├── styles/        # Global styles
│   │   └── tailwind.css
│   └── utils/         # Helper functions
       └── api.ts
```

# 2. Core Components Explanation

## A. Page Setup (pages/SettingsPage.ts)
```typescript
export function renderSettingsPage(container: HTMLElement): void {
  container.innerHTML = `
    <div class="min-h-screen bg-gray-100">
      <nav class="settings-nav">
        <!-- Navigation tabs -->
        <button class="tab active" data-tab="account">Account</button>
        <button class="tab" data-tab="game">Game Settings</button>
      </nav>
      
      <div class="settings-content">
        <!-- Account Settings Form -->
        <form id="accountSettings" class="settings-form active">
          <!-- Form fields -->
        </form>
        
        <!-- Game Settings Form -->
        <form id="gameSettings" class="settings-form">
          <!-- Form fields -->
        </form>
      </div>
    </div>
  `;
  
  // Register event listeners
  setupTabNavigation();
  setupFormHandlers();
}
```

## B. Game Engine Setup (game/Scene.ts)
```typescript
import { Engine, Scene, FreeCamera, Vector3, HemisphericLight } from '@babylonjs/core';

export class GameScene {
  private canvas: HTMLCanvasElement;
  private engine: Engine;
  private scene: Scene;

  constructor(canvasElement: string) {
    this.canvas = document.getElementById(canvasElement) as HTMLCanvasElement;
    this.engine = new Engine(this.canvas, true);
    this.scene = new Scene(this.engine);
    
    this.setupCamera();
    this.setupLights();
    this.createGameObjects();
  }

  private setupCamera(): void {
    const camera = new FreeCamera('camera1', 
      new Vector3(0, 5, -10), this.scene);
    camera.setTarget(Vector3.Zero());
  }

  // ... other setup methods
}
```

# 3. Page Components Implementation

## A. Component Structure
```typescript
// components/Navigation.ts
export class Navigation {
  private container: HTMLElement;
  
  constructor(container: HTMLElement) {
    this.container = container;
    this.render();
    this.setupEventListeners();
  }

  private render(): void {
    this.container.innerHTML = `
      <nav class="bg-gray-800 text-white">
        <div class="container mx-auto px-4">
          <!-- Navigation items -->
        </div>
      </nav>
    `;
  }
}
```

## B. Form Handling
```typescript
// components/Forms/SettingsForm.ts
export class SettingsForm {
  private form: HTMLFormElement;
  
  constructor(formId: string) {
    this.form = document.getElementById(formId) as HTMLFormElement;
    this.setupValidation();
    this.handleSubmit();
  }

  private async handleSubmit(): Promise<void> {
    this.form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(this.form);
      // API call to save settings
    });
  }
}
```

# 4. Game Engine Integration

## A. Physics Setup
```typescript
// game/Physics.ts
import { PhysicsImpostor, Scene, Vector3 } from '@babylonjs/core';

export class GamePhysics {
  private scene: Scene;

  constructor(scene: Scene) {
    this.scene = scene;
    this.setupPhysics();
  }

  private setupPhysics(): void {
    this.scene.enablePhysics(new Vector3(0, -9.81, 0));
    // Setup collision detection
  }
}
```

## B. Controls Implementation
```typescript
// game/Controls.ts
export class PlayerControls {
  private static readonly MOVEMENT_SPEED = 0.1;
  
  constructor(scene: Scene, paddle: Mesh) {
    this.setupKeyboardControls(paddle);
  }

  private setupKeyboardControls(paddle: Mesh): void {
    scene.onKeyboardObservable.add((kbInfo) => {
      switch (kbInfo.type) {
        case KeyboardEventTypes.KEYDOWN:
          this.handleKeyDown(kbInfo.event.key, paddle);
          break;
      }
    });
  }
}
```

# 5. Key Features and Benefits

## A. TypeScript Features Used
1. Type Safety
   - Interface definitions
   - Enum usage
   - Generics implementation

2. Module System
   - Clean import/export
   - Namespace organization
   - Declaration files

## B. Tailwind Benefits
1. Responsive Design
   - Mobile-first approach
   - Breakpoint system
   - Flexible grid system

2. Component Styling
   - Utility classes
   - Custom configurations
   - Theme system

# 6. State Management

## A. Game State
```typescript
interface GameState {
  player1Score: number;
  player2Score: number;
  gameStatus: 'waiting' | 'playing' | 'finished';
  ballPosition: Vector3;
  lastUpdate: number;
}

class GameStateManager {
  private state: GameState;
  
  constructor() {
    this.initializeState();
  }

  private initializeState(): void {
    this.state = {
      player1Score: 0,
      player2Score: 0,
      gameStatus: 'waiting',
      ballPosition: Vector3.Zero(),
      lastUpdate: Date.now()
    };
  }
}
```

## B. User Settings State
```typescript
interface UserSettings {
  gameSpeed: number;
  difficulty: 'easy' | 'medium' | 'hard';
  soundEnabled: boolean;
  theme: 'light' | 'dark';
}
```

# 7. Testing and Maintenance

## A. Component Testing
```typescript
// tests/Navigation.test.ts
describe('Navigation Component', () => {
  let container: HTMLElement;
  
  beforeEach(() => {
    container = document.createElement('div');
    document.body.appendChild(container);
  });

  test('renders navigation items', () => {
    const nav = new Navigation(container);
    expect(container.querySelectorAll('.nav-item')).toHaveLength(4);
  });
});
```

## B. Game Engine Testing
```typescript
// tests/GameScene.test.ts
describe('GameScene', () => {
  let canvas: HTMLCanvasElement;
  let gameScene: GameScene;

  beforeEach(() => {
    canvas = document.createElement('canvas');
    document.body.appendChild(canvas);
    gameScene = new GameScene(canvas);
  });

  test('initializes with correct camera position', () => {
    const camera = gameScene.getCamera();
    expect(camera.position).toEqual(new Vector3(0, 5, -10));
  });
});
```

# Additional Resources

1. TypeScript Documentation: https://www.typescriptlang.org/docs/
2. Tailwind CSS Documentation: https://tailwindcss.com/docs
3. Babylon.js Documentation: https://doc.babylonjs.com/

# Notes

- All components are written in TypeScript
- Styling uses Tailwind CSS utility classes
- Game engine uses Babylon.js for 3D rendering
- Frontend runs on port 3000
- Backend API calls are made to port 3001

# Development Commands

```bash
# Install dependencies
npm install

# Start development server
npm run dev

# Build for production
npm run build

# Run tests
npm test

# Lint code
npm run lint
```

See package.json for complete list of available commands. 