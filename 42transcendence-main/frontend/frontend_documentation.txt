# Frontend Implementation Documentation for 42 Transcendence
# =====================================================

Table of Contents:
1. Frontend Architecture Overview
2. Core Components Explanation
3. Page Components Implementation
4. Game Engine Integration
5. Key Features and Benefits
6. State Management
7. Testing and Maintenance

# 1. Frontend Architecture Overview

## Core Technologies
1. TypeScript
   - Strongly typed JavaScript superset
   - Enhanced IDE support and error detection
   - Better code organization and maintainability

2. Tailwind CSS
   - Utility-first CSS framework
   - Rapid UI development
   - Responsive design system

3. Router System
   - Custom client-side routing
   - History API integration
   - Dynamic component loading

## Directory Structure (Frontend)
```
frontend/
├── src/
│   ├── pages/          # Main page components
│   │   ├── SettingsPage.ts
│   │   ├── AboutPage.ts
│   │   ├── GamePage.ts
│   │   └── HomePage.ts
│   ├── components/     # Reusable UI components
│   │   ├── Navigation.ts
│   │   └── Forms/
│   ├── game/          # Game engine related code
│   │   ├── Pong.ts
│   │   ├── MultiViewPong.ts
│   │   └── Controls.ts
│   ├── router/        # Routing system
│   │   └── router.ts
│   └── styles/        # Global styles
       └── tailwind.css
```

# 2. Core Components Explanation

## A. Router Implementation (router/router.ts)
```typescript
type Route = {
  path: string;
  component: (container: HTMLElement) => void;
};

const routes: Route[] = [];

export function registerRoute(path: string, component: (container: HTMLElement) => void): void {
  routes.push({ path, component });
}

export function initRouter(container: HTMLElement): void {
  // Handle navigation
  function navigate(path: string): void {
    const route = routes.find(r => r.path === path) || routes[0];
    route.component(container);
    window.history.pushState({}, '', path);
  }

  // Initial route
  navigate(window.location.pathname);

  // Handle browser back/forward
  window.addEventListener('popstate', () => {
    navigate(window.location.pathname);
  });

  // Expose navigate function globally
  (window as any).navigate = navigate;
}
```

## B. Page Components
```typescript
// pages/HomePage.ts
export function renderHomePage(container: HTMLElement): void {
  container.innerHTML = `
    <div class="min-h-screen bg-gray-100">
      <nav class="bg-white shadow-lg">
        <div class="container mx-auto px-4">
          <button onclick="navigate('/play')" class="btn-primary">
            Play
          </button>
          <!-- Other navigation items -->
        </div>
      </nav>
      <!-- Main content -->
    </div>
  `;
}
```

# 3. Service Configuration

## A. Port Configuration
- Frontend Service: http://localhost:4000
- Backend Service: http://localhost:4002
- Pong Game Service: http://localhost:4001

## B. API Integration
```typescript
const API_BASE_URL = 'http://localhost:4002/api';

async function apiCall(endpoint: string, options = {}) {
  const response = await fetch(`${API_BASE_URL}${endpoint}`, {
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
  return response.json();
}
```

# 4. Game Implementation

## A. Game Modes
1. Single View Pong
   - Classic pong gameplay
   - Local player controls
   - AI opponent option

2. Multi View Pong
   - Multiplayer support
   - Real-time gameplay
   - WebSocket communication

## B. Game State Management
```typescript
class GameState {
  private score: { player1: number; player2: number };
  private gameStatus: 'waiting' | 'playing' | 'finished';

  constructor() {
    this.score = { player1: 0, player2: 0 };
    this.gameStatus = 'waiting';
  }

  // State management methods
}
```

# 5. Key Features and Benefits

## A. TypeScript Features Used
1. Type Safety
   - Interface definitions
   - Enum usage
   - Generics implementation

2. Module System
   - Clean import/export
   - Namespace organization
   - Declaration files

## B. Tailwind Benefits
1. Responsive Design
   - Mobile-first approach
   - Breakpoint system
   - Flexible grid system

2. Component Styling
   - Utility classes
   - Custom configurations
   - Theme system

# 6. State Management

## A. Game State
```typescript
interface GameState {
  player1Score: number;
  player2Score: number;
  gameStatus: 'waiting' | 'playing' | 'finished';
  ballPosition: Vector3;
  lastUpdate: number;
}

class GameStateManager {
  private state: GameState;
  
  constructor() {
    this.initializeState();
  }

  private initializeState(): void {
    this.state = {
      player1Score: 0,
      player2Score: 0,
      gameStatus: 'waiting',
      ballPosition: Vector3.Zero(),
      lastUpdate: Date.now()
    };
  }
}
```

## B. User Settings State
```typescript
interface UserSettings {
  gameSpeed: number;
  difficulty: 'easy' | 'medium' | 'hard';
  soundEnabled: boolean;
  theme: 'light' | 'dark';
}
```

# 7. Testing and Maintenance

## A. Component Testing
```typescript
// tests/Navigation.test.ts
describe('Navigation Component', () => {
  let container: HTMLElement;
  
  beforeEach(() => {
    container = document.createElement('div');
    document.body.appendChild(container);
  });

  test('renders navigation items', () => {
    const nav = new Navigation(container);
    expect(container.querySelectorAll('.nav-item')).toHaveLength(4);
  });
});
```

## B. Game Engine Testing
```typescript
// tests/GameScene.test.ts
describe('GameScene', () => {
  let canvas: HTMLCanvasElement;
  let gameScene: GameScene;

  beforeEach(() => {
    canvas = document.createElement('canvas');
    document.body.appendChild(canvas);
    gameScene = new GameScene(canvas);
  });

  test('initializes with correct camera position', () => {
    const camera = gameScene.getCamera();
    expect(camera.position).toEqual(new Vector3(0, 5, -10));
  });
});
```

# Additional Resources

1. TypeScript Documentation: https://www.typescriptlang.org/docs/
2. Tailwind CSS Documentation: https://tailwindcss.com/docs
3. Babylon.js Documentation: https://doc.babylonjs.com/

# Notes

- Frontend runs on port 4000
- Backend API calls are made to port 4002
- Pong game service runs on port 4001
- All services are containerized using Docker
- Inter-service communication is handled through Docker network

# Development Commands

```bash
# Build and start all services
docker compose up --build -d

# Start development server only
docker compose up frontend

# Build for production
docker compose build frontend

# View logs
docker compose logs frontend
```

See docker-compose.yml for complete service configuration. 